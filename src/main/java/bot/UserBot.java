package bot;

import db.AdminDAO;
import db.UserDAO;
import model.Order;
import model.UserState;
import db.OrderDAO;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import util.BotConfig;
import util.BotConstants;
import util.KeyboardFactory;
import java.sql.Timestamp;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import static java.awt.SystemColor.text;

public class UserBot extends TelegramLongPollingBot {
    private final ConcurrentHashMap<Long, UserState> userStates = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<Long, Long> lastActivity = new ConcurrentHashMap<>();
    private final Map<Long, Order> tempOrders = new ConcurrentHashMap<>();

    @Override
    public String getBotUsername() {
        return "Lesha2417teBot";
    }

    @Override
    public String getBotToken() {
        return BotConfig.getUserBotToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage()) {
            return;
        }


        long chatId = update.getMessage().getChatId();
        UserState state = userStates.getOrDefault(chatId, UserState.NONE);
        lastActivity.put(chatId, System.currentTimeMillis());

        if (update.getMessage().hasContact() && state == UserState.AWAITING_PHONE) {
            String phone = update.getMessage().getContact().getPhoneNumber();
            finalizeOrder(chatId, phone);
        } else if (update.getMessage().hasText()) {
            String text = update.getMessage().getText();

            if (text.equals("/start")) {
                UserDAO.addUser(chatId);//–¥–æ–±–∞–≤–∫–∞ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞
                sendMessage(chatId, BotConstants.WELCOME_MESSAGE, KeyboardFactory.createCountryKeyboard());
                userStates.put(chatId, UserState.AWAITING_COUNTRY);

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏ –°–†–ê–ó–£ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                Order newOrder = new Order(chatId);
                String userName = update.getMessage().getFrom().getFirstName(); // –ü–æ–ª—É—á–∞–µ–º –∏–º—è
                newOrder.setUserName(userName); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
                tempOrders.put(chatId, newOrder);
            } else if (text.equals("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")) {
                sendMessage(chatId, BotConstants.CONTACT_ADMIN_MESSAGE, null);
            } else {
                handleUserState(chatId, text);
            }
        }
    }

    private void handleUserState(long chatId, String text) {
        UserState state = userStates.getOrDefault(chatId, UserState.NONE);
        Order order;

        switch (state) {
            case AWAITING_COUNTRY:
                order = tempOrders.get(chatId);

                if (text.equals("üáØüáµ –Ø–ø–æ–Ω–∏—è")) {
                    sendMessage(chatId, BotConstants.JAPAN_WARNING, KeyboardFactory.createJapanConfirmationKeyboard());
                } else if (text.equals("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –Ø–ø–æ–Ω–∏–µ–π")) {
                    if (order != null) {
                        order.setCountry("üáØüáµ –Ø–ø–æ–Ω–∏—è");
                    }
                    sendMessage(chatId, BotConstants.BRAND_MODEL_QUESTION, new ReplyKeyboardRemove(true));
                    userStates.put(chatId, UserState.AWAITING_BRAND_MODEL);
                } else if (text.equals("üá∞üá∑ –ö–æ—Ä–µ—è") || text.equals("üá®üá≥ –ö–∏—Ç–∞–π") || text.equals("üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è")) {
                    if (order != null) {
                        order.setCountry(text);
                    }
                    sendMessage(chatId, BotConstants.BRAND_MODEL_QUESTION, new ReplyKeyboardRemove(true));
                    userStates.put(chatId, UserState.AWAITING_BRAND_MODEL);
                } else {
                    sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.");
                }
                break;

            case AWAITING_BRAND_MODEL:
                order = tempOrders.get(chatId);
                if (order != null) {
                    order.setBrandModel(text);
                }
                sendMessage(chatId, BotConstants.BUDGET_QUESTION, null);
                userStates.put(chatId, UserState.AWAITING_BUDGET);
                break;

            case AWAITING_BUDGET:
                order = tempOrders.get(chatId);
                if (order != null) {
                    order.setBudget(text);
                }
                requestPhoneNumber(chatId);
                userStates.put(chatId, UserState.AWAITING_PHONE);
                break;

            case AWAITING_PHONE:
                if (text.matches("^(\\+)?(\\d{10,15})$")) {
                    finalizeOrder(chatId, text);
                } else {
                    sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789");
                }
                break;
        }
    }

    public void sendMessage(long chatId, String text) {
        sendMessage(chatId, text, null);
    }

    public void sendMessage(long chatId, String text, ReplyKeyboard replyMarkup) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        if (replyMarkup != null) {
            message.setReplyMarkup(replyMarkup);
        }
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void requestPhoneNumber(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("üìû –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –õ–∏–±–æ, —É–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7–•–•–•–•–•–•–•–•–•\n" +
                "\n" +
                "‚ö†\uFE0F–ù–æ–º–µ—Ä –Ω—É–∂–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ—Ç–æ–≤, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        KeyboardButton contactButton = new KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º");
        contactButton.setRequestContact(true);
        KeyboardRow row = new KeyboardRow();
        row.add(contactButton);
        keyboardMarkup.setKeyboard(List.of(row));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void finalizeOrder(long chatId, String phone) {
        Order order = tempOrders.get(chatId);
        if (order != null) {
            order.setPhone(phone);
            order.setOrderTime(new Timestamp(System.currentTimeMillis()));
            OrderDAO.saveOrder(order);
            tempOrders.remove(chatId);

            sendMessage(chatId, BotConstants.ORDER_COMPLETE_MESSAGE, new ReplyKeyboardRemove(true));
            userStates.put(chatId, UserState.NONE);
            // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–û–í ---
            notifyAdmins(order);
        } else {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start");
        }
    }

    public ConcurrentHashMap<Long, Long> getLastActivityMap() {
        return lastActivity;
    }

    public ConcurrentHashMap<Long, UserState> getUserStates() {
        return userStates;
    }
    private void notifyAdmins(Order order) {
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –≤ AdminDAO –µ—Å—Ç—å –º–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π ID –∞–¥–º–∏–Ω–æ–≤
        List<Long> adminIds = AdminDAO.getAdminChatIds();

        String messageText = String.format(
                "üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n" +
                        "üë§ –ö–ª–∏–µ–Ω—Ç: %s\n" +
                        "üåç –°—Ç—Ä–∞–Ω–∞: %s\n" +
                        "üöó –ê–≤—Ç–æ: %s\n" +
                        "üí∞ –ë—é–¥–∂–µ—Ç: %s\n" +
                        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s",
                order.getUserName(), order.getCountry(),
                order.getBrandModel(), order.getBudget(), order.getPhone()
        );

        for (Long adminId : adminIds) {
            // –¢—É—Ç –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ sendMessage –∏–∑ –≤–∞—à–µ–≥–æ AdminBot'a
            // –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä AdminBot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
            // –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞—Ç—å SendMessage –ø—Ä—è–º–æ –∑–¥–µ—Å—å.
            SendMessage message = new SendMessage(String.valueOf(adminId), messageText);
            try {
                execute(message); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç –∏–º–µ–Ω–∏ UserBot
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}