package bot;

import model.UserState;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import util.BotConfig;
import util.BotConstants;
import util.KeyboardFactory;
import model.Order;
import model.UserState;
import db.OrderDAO;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;


public class UserBot extends TelegramLongPollingBot {
    private final ConcurrentHashMap<Long, UserState> userStates = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<Long, Long> lastActivity = new ConcurrentHashMap<>();
 private final Map<Long, Order> tempOrders = new ConcurrentHashMap<>();

    @Override
    public String getBotUsername() {
        return "Lesha2417teBot";
    }

    @Override
    public String getBotToken() {
        return BotConfig.getUserBotToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'text', –∞ –Ω–µ 'messageText'
            String text = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            System.out.println("\n=== –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===");
            System.out.println("ChatID: " + chatId);
            System.out.println("–¢–µ–∫—Å—Ç: " + text);
            System.out.println("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: " + userStates.get(chatId));

            lastActivity.put(chatId, System.currentTimeMillis());

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 'text' –≤–º–µ—Å—Ç–æ 'messageText'
            if (text.equals("/start")) {
                sendMessage(chatId, BotConstants.WELCOME_MESSAGE, KeyboardFactory.createCountryKeyboard());
                userStates.put(chatId, UserState.CHOOSE_COUNTRY);
                tempOrders.put(chatId, new Order(chatId)); // –ù–µ –∑–∞–±—ã–≤–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
            } else if (text.equals("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")) {
                sendMessage(chatId, BotConstants.CONTACT_ADMIN_MESSAGE, null);
            } else {
                handleUserState(chatId, text); // –ü–µ—Ä–µ–¥–∞–µ–º 'text' –∞ –Ω–µ 'messageText'
            }
        }
    }

    private void handleUserState(long chatId, String text) {
        UserState state = userStates.getOrDefault(chatId, UserState.START);
        switch (state) {
            case CHOOSE_COUNTRY:
                if (text.equals("üáØüáµ –Ø–ø–æ–Ω–∏—è")) {
                    sendMessage(chatId, BotConstants.JAPAN_WARNING, KeyboardFactory.createCountryKeyboardWithoutJapan());
                } else {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω—É –≤ –∑–∞–∫–∞–∑
                    Order order = tempOrders.get(chatId);
                    if (order != null) {
                        order.setCountry(text);
                    }
                    sendMessage(chatId, BotConstants.BRAND_MODEL_QUESTION, new ReplyKeyboardRemove(true));
                    userStates.put(chatId, UserState.ENTER_BRAND_MODEL);
                }
                break;

            case ENTER_BRAND_MODEL:
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–∫–∞–∑
                Order order = tempOrders.get(chatId);
                if (order != null) {
                    order.setBrandModel(text);
                }
                sendMessage(chatId, BotConstants.BUDGET_QUESTION, null);
                userStates.put(chatId, UserState.ENTER_BUDGET);
                break;

            case ENTER_BUDGET:
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—é–¥–∂–µ—Ç –≤ –∑–∞–∫–∞–∑
                order = tempOrders.get(chatId);
                if (order != null) {
                    order.setBudget(text);
                }
                sendMessage(chatId, BotConstants.PHONE_QUESTION, null);
                userStates.put(chatId, UserState.ENTER_PHONE);
                break;

            case ENTER_PHONE:
                if (text.matches("7\\d{10}")) {
                    // –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
                    order = tempOrders.get(chatId);
                    if (order != null) {
                        order.setPhone(text);
                        OrderDAO.saveOrder(order); // –í–æ—Ç —ç—Ç–æ –±—ã–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ!
                        tempOrders.remove(chatId);
                    }
                    sendMessage(chatId, BotConstants.ORDER_COMPLETE_MESSAGE, null);
                    userStates.put(chatId, UserState.ORDER_CONFIRMED);
                } else {
                    sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: 79123456789", null);
                }
                break;
        }
    }
    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    public void sendMessage(long chatId, String text) {
        sendMessage(chatId, text, null);
    }
    public void sendMessage(long chatId, String text, ReplyKeyboard replyMarkup) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        if (replyMarkup != null) {
            message.setReplyMarkup(replyMarkup);
        }
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public ConcurrentHashMap<Long, Long> getLastActivityMap() {
        return lastActivity;
    }

    public ConcurrentHashMap<Long, UserState> getUserStates() {
        return userStates;
    }
    private void handlePhone(long chatId, String phone) {
        Order order = tempOrders.get(chatId);
        if (order == null) {
            System.err.println("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è chatId: " + chatId);
            return;
        }

        System.out.println("–ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º: " + order); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–∫—Ç
        order.setPhone(phone);
        OrderDAO.saveOrder(order);
        tempOrders.remove(chatId);
    }
    private void handleCountrySelection(long chatId, String country) {
        System.out.println("=== –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã ===");
        System.out.println("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: " + userStates.get(chatId));

        Order order = tempOrders.get(chatId);
        if (order == null) {
            System.err.println("‚ùå tempOrders –ø—É—Å—Ç –¥–ª—è chatId: " + chatId);
            return;
        }
        order.setCountry(country);
        System.out.println("–°—Ç—Ä–∞–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: " + country);
    }
    private void debugTempOrders() {
        System.out.println("=== –°–æ–¥–µ—Ä–∂–∏–º–æ–µ tempOrders ===");
        tempOrders.forEach((chatId, order) -> {
            System.out.println("ChatID: " + chatId + " -> " + order);
        });
    }
}